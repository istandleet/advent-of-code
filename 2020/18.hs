{-# language OverloadedStrings #-}
{-# language BangPatterns #-}
{-# language LambdaCase #-} 
{-# language TupleSections #-}
{-# language TransformListComp #-}
{-# language RecordWildCards #-}
{-# language TemplateHaskell #-}
{-# language NoImplicitPrelude #-}
module Main where

import Prelude hiding (Num(..), (+),(-))
import qualified Prelude
import Control.Applicative
import Control.Lens
import Data.Bits
import Data.Char
import Data.Foldable
import Data.Bifunctor
import Data.Either
import Data.Function
import Data.Maybe
import Data.Tuple
import Data.Set (Set)
import qualified Data.Set as Set
import Data.IntSet (IntSet)
import qualified Data.IntSet as IntSet
import Data.Map.Strict (Map)
import qualified Data.Map.Strict as Map
import qualified Data.Vector as V
import qualified Data.Vector.Mutable as VM
import qualified Data.List
import Data.Array.Unboxed
import GHC.Exts (the, groupWith)

import Data.Text (Text)
import qualified Data.Text as T
import Data.Attoparsec.Text as P hiding (takeWhile)

main :: IO ()
main = do
    s <- readFile "18.txt"
    input <- either fail pure $ parseOnly parseLines $ T.pack s
    print $ part1 input
    print part2

part1 :: [Equation] -> Integer
part1 = sum . map eval

data Equation =
     Scalar Integer
   | Add Equation Equation
   | Mult Equation Equation
   deriving (Show, Eq)

eval :: Equation -> Integer
eval (Scalar n) = n
eval (Add a b) = eval a Prelude.+ eval b
eval (Mult a b) = eval a Prelude.* eval b

data RawEquation =
     Number Integer
   | Plus
   | Times
   | Parens [RawEquation]
   deriving (Show, Eq)

fromRaws :: [RawEquation] -> Equation
fromRaws = (\(Right v) -> v) . foldl go (Left $ Add (Scalar 0)) . map fromRaws'
    where
    go :: Either (Equation -> Equation) Equation
       -> Either (Equation -> Equation -> Equation) Equation
       -> Either (Equation -> Equation) Equation
    go acc ep = case ep of
        Left f -> let Right v = acc in Left (f v)
        Right v -> let Left f = acc in Right (f v)

fromRaws' (Number p) = Right $ Scalar p
fromRaws' (Parens p) = Right $ fromRaws p
fromRaws' Plus = Left Add
fromRaws' Times = Left Mult

-- Parsing
parseLines :: P.Parser [Equation]
parseLines = fmap (map fromRaws) $ (parseEquation `sepBy1'` endOfLine) <* skipSpace <* endOfInput

parseEquation :: P.Parser [RawEquation]
parseEquation = parseBit `sepBy1'` char ' '
    where 
    parseBit = parseScalar 
           <|> parseParens
           <|> (Plus <$ char '+') 
           <|> (Times <$ char '*') 

parseScalar :: P.Parser RawEquation
parseScalar = Number <$> P.decimal

parseParens :: P.Parser RawEquation
parseParens = Parens <$> do
    P.char '('
    e <- parseEquation
    P.char ')'
    return e


-- * Part 2
infixl 7 +
a + b = a Prelude.+ b

infixl 6 *
a * b = a Prelude.* b

part2 = sum 
  [7 * (4 * 2 + 8 * (6 + 9) * 7 * 6) + (2 + 5 * 5 * 4 + 6 + 9) * 6
  ,4 * 8 * 9 + (6 * 7 * 8 * (6 * 5 * 2 + 8 + 5)) + 7
  ,(2 * 6 * 4 + 3 * 3) * 9 * 9
  ,3 * (2 * 2 + (5 * 8 * 6 * 6))
  ,6 + (4 + 4) * 2 + 8
  ,(8 + (5 + 9 + 8 + 7)) * (4 * 8)
  ,8 + (8 * 6 * 6 + 4 * 7) * 6
  ,7 * (8 * (3 + 4 * 8 * 6) * (8 + 4 + 2 * 8) + 6 * 5) + 9
  ,(8 + 8 * 3 + 6 * 4 * 4) * 6 + 2 + 2 + 6
  ,2 + (3 + (5 * 7 + 3) + 5 + 5 + 5 + 6) + 8 * (6 + 4 * 2 + 5 + 5 * 4) + 5
  ,7 * (8 * 9 * 2 * 6 + (2 * 7 + 7 * 2 + 2 + 8)) * 7 + 8
  ,(5 * 2 * 4 + 2 + 6 * (6 * 6 + 4)) + 9 + 5
  ,((8 + 4 * 6) * 5) + 8
  ,(4 + 2 * 2 + 6 * 9) * 3
  ,5 * 2 * (2 + 5 * 3 * 7) + (8 + (2 + 2 + 7 * 8 + 2 * 8) * (5 + 2 * 2) * 2 * 8) + 6
  ,4 + 8 + 6 + (7 * 2) * (8 * 5 * 5 + (9 * 9 + 4 + 6) + 6 + 6)
  ,((7 + 5 * 6) * 6 + (6 + 3 * 5 * 8) + (9 + 6 + 9 * 8)) * 3 + 3
  ,(7 * 8 * 6 + 8 * (7 + 2 + 3 + 2 + 2 * 3) + (8 * 9 * 8)) + (2 + 5 + (6 + 7 + 6)) + 5 + 8 + 5 * 4
  ,(2 * 8 + (7 + 7)) + 4 * 9 * 4 * (2 * (4 * 5 * 3 * 9 * 9) + (4 * 3 + 5 * 4 + 7 + 3) * (5 * 3 * 2 + 4 * 7 + 7) * 4) * 4
  ,7 + 9 + (3 * (7 + 5) + (7 * 5 * 3 + 9))
  ,5 + (9 + 6 * 7) * 9 + (8 * 5 * 5 * (6 + 8 * 2 * 4 + 3) * 8 * 9) * 9
  ,(4 + 3 + 9) * 9 * 6 * 7 * 6 * 6
  ,3 + ((8 + 9) * 6 * 6) + 9
  ,(7 + 8 * 2 * (2 + 8 * 2) * (7 * 3 + 4)) * (4 * 9 * (5 * 2 * 9) + (3 + 6 * 4 * 7 + 8 + 6) + (6 + 6)) * (2 + 7 * 5) + 8
  ,(8 * 7) + 9
  ,(9 * 9 + 3 * 8 * (4 * 9 + 6) + 2) + (5 + 3) * 4
  ,(3 * 7 * 4 + 3 * 2 * 8) + 4
  ,9 * 8 * (9 * (7 * 7) + 6 + 2 + 2 + 3) + 7 * 4
  ,4 * 3 * (5 + 8 + 8 + (2 + 4 * 3 * 5 * 5 + 7) * 5 * (4 * 7 + 2 * 2 + 3 + 7)) + 8
  ,7 + (2 * (3 + 2) + 5 * 9 * 6 + 4) + (8 * (5 + 5 * 9) * 9)
  ,(6 * 9 + 7 * 2) * ((4 + 7 + 8) + (8 + 2 * 9 * 6 * 5) + 6 * (8 + 6 * 7 * 8 + 4 * 4) * 5 + 6) * (3 + 2)
  ,7 * 6 + 9 * (7 + 3 + 8 + 6)
  ,4 * 5 * 8 + 5 + 6 + 6
  ,(2 * 6 * 3) * (9 * 4 * (9 * 5 + 9 * 7 * 7 * 4) * 5 * (4 * 6 * 8)) * 8
  ,5 * 9 + (8 * 6) + (5 + 6) * 2
  ,4 + 6 + 3 * (8 + 2 + 5 + (6 * 3 * 8 * 8 * 6 + 7) + 3 * (8 * 5 * 8 + 5 * 6 + 8)) + 9 * (2 * 5)
  ,(8 * 7 + 9 + 7 * 9 + 4) + 3 + 9 + 7 + 7 * 8
  ,5 * 3 * (4 + 7 + (3 * 4) + (9 + 9 * 4 * 4 + 8) * 6 * 4) * 2 * 3
  ,5 * 4 * ((6 * 5) * (2 + 7 + 8 + 5 * 5))
  ,8 + ((8 * 9 * 2 * 7 + 5 * 3) * 8 * (9 * 7) + (5 + 4 * 6 * 3 + 6 + 9) + 2 * 7) * 3 + 2 * 7
  ,2 * (6 + 3 + (5 + 5 * 3 + 2 + 7 + 7) + 2 + (8 * 7 + 7 * 3 * 8) + 4) * 3 * 3 * (5 + 5 * 5 * (6 * 2 + 5 + 8) + 9)
  ,(7 + 4 + 2 * (9 + 4 + 5)) + 7 + (2 + (6 + 2 * 2 * 7 + 7 + 5) + 6 + 9 + 4 * 8) * 3
  ,(8 + (9 * 7 + 8 * 4 * 7) * 9 * 5 + 4) * (2 + 7 * 6 * (8 + 8) + (3 * 3 + 8 + 8 + 2 + 9) + 7) + 4 + 2 * 9
  ,(2 * 4 + (9 * 4 * 8 + 2 * 8)) * 3
  ,6 + 9 * 2 + ((4 * 5 * 4) * 6 + 5 * 7) * 9
  ,5 * 2 * (7 * 3) * 7
  ,((5 + 4 * 5) * (3 * 9 * 8) + 4 + 5 + 7 * 2) + 3 * 4 * (3 + (6 * 2 + 2) * 5)
  ,2 * 8 * 2 * 9
  ,(6 + (9 + 7 + 9 + 4) * 8 + 2 * 3) * 3
  ,6 + 9 * (7 + 8 + (6 * 6 + 7 + 7))
  ,4 * (9 * 4 + 6) + 9 + 6
  ,6 * 8 * (8 * (3 * 9 * 5 + 3 * 6 * 5) + 4 * (6 + 3 + 8 * 3 * 9) * 2 * 8) + 3
  ,7 * 5 + ((6 + 3 * 5 + 3 * 4 * 6) + 9 + 9 + (4 + 7 + 5) * 2 * 2) * 5 * 8 * 5
  ,(4 + 2 + 7 * (6 + 6)) + 5 + 7 * (6 * (5 * 8 * 8 * 5 + 4 + 8))
  ,5 + 9 + 3 + 6 + ((7 + 2 + 4 + 2 * 4 * 3) + 9)
  ,4 + (7 * 9 + 5 * (2 + 6 * 7 + 2 * 8)) * 5 + (8 + 7 * 7 + 9)
  ,5 * 5 + 4 * (6 * 2 + 5 + 7 * 8 + (3 * 2 * 2 + 9)) * 5 + (7 * 6 * 3)
  ,5 + 4 * 4 + (7 * 5 * (6 + 6) + 2 + 2) * 6
  ,7 * 8 * (4 * 3 * 4 * 4 * 7 + 6)
  ,2 + 5 + 9
  ,8 + 2 * (8 * 3 + 3 + 7) * 8 + 4
  ,3 * (7 + (7 + 6 * 8 + 9 * 3))
  ,(3 + 5 + 7 * (7 * 5 * 8 + 7 * 4) + 6) + 9 * 7
  ,(3 * (6 + 7 * 7 * 3 + 3) * (8 + 2 + 6 + 6) * 2 + 7 + 4) * 9 * 6 * 3 * 8 * 9
  ,2 + (7 * (8 + 7 + 2))
  ,4 + 4 + 8 + (5 + 3 * 3 + 4 + (9 * 9 * 9 + 3 + 6 * 4)) + 4
  ,(7 + 9 + 8 * 7 + 5 * 6) + 8 + 7 * 6 + (7 + 2) + 6
  ,(3 * 9 + 3 * 4 + 6 + 9) + (2 + 6) * (2 + 7 * 6 * 9 + 4 * 9) + 3 * 9
  ,8 * 4 + ((2 * 4 * 8 * 5 * 7) * 5 + 2) * 9
  ,(6 * 5 * (4 + 9) * (3 + 7 + 7) + 7 * 6) + (5 * 4 + 5 * 6 * 6 + (8 * 6)) * 9 + 4 + 2
  ,(9 + (8 * 5 * 5) * 5 + 3 * (5 * 6 + 8 + 6 + 3 * 9)) * (5 + 4 + 3 + 3 * (7 + 5 + 8 * 4 + 9 * 7))
  ,9 + (7 * 8)
  ,3 + 8 * 4 * (2 + 3 + 2) + 6
  ,4 + 8 * (6 + 8 * 8) + 3 + 3
  ,(2 * (8 + 6) * 3 + 6 + 6 * 4) * 8 * 3
  ,((3 * 7 * 2 * 6 + 3) * 2 + 3 * 9 + (9 * 5 * 7 + 5 + 6) + 6) + 4 + 9
  ,(7 + (7 + 9 * 5) + 5 + 2) * 6
  ,9 * 7 * 9
  ,2 * (4 + 6 + 5 + 3 * 5) * 6 * 2
  ,(5 + 3 * 7 * 8 * 9) + 5 + 5 + 3 * 6 * (7 * 8 * 5)
  ,7 + 8 + 3 + 7 * 7 * 3
  ,4 + (8 * 6 + 6 + 5) + (3 + 8 + 9 * 9) * 8 * 6
  ,3 * 2 * (5 + 3) + 7 + 7 + (6 + 4)
  ,6 + 9 + 9 + (2 * 5 + 6 + 8 + 4)
  ,(2 + 3 * 5 + 6 + (7 * 2 + 6) * 6) + 6 * 8 * 7 + 9 * (5 + (8 + 4 * 6) + 9 + (7 + 3))
  ,6 + 6 * (8 + 7 + 4 + (3 * 8 + 6 * 8) + 3) + 3
  ,9 * 8 + (9 + 6) + 4 + 5
  ,7 + (6 * 8 * 3 + 9)
  ,6 * 5 * 8
  ,((4 * 5 * 2) + (6 + 4 + 5 + 5 + 7 * 5) * 7 + 5 + 9) + (2 + 8 + (2 + 4) * 8) * 4 + (3 + (7 + 2 * 9) * 2 * 6 + 3 + (2 * 5 + 5 + 4 * 4 + 7)) * (7 + 6 * 4) * 5
  ,6 + 6 * 9 * (7 * 2 * 4 + 8 * (7 + 2 + 9 + 2) + 8) + 6 + 5
  ,((4 + 4 * 8 + 3 + 8 * 2) * 4) * (5 + 4 + 5 + 5 + 3 * 8) * ((9 + 9 + 7) + 6 + 7 + (9 + 5 * 8) * (6 * 7 * 2 + 2 + 4)) * 4 * 6
  ,3 + 7 + 5 * 4 * 8
  ,((9 + 4 * 3 + 9 * 3 * 8) * 4 * 4 + 3 + 4) + 4 + 9 + (2 + 4 * 8 + 7 * 7 * 4)
  ,4 + 2 + 7 * 5 * 5
  ,(5 + 9 + 2 + 8 + 5) * (6 + 6) * 6 + 3 * 6
  ,2 + 6 + 5 * 7 + (5 + 8 + 7) * 9
  ,8 + 6 + (4 + 7 * (7 * 3 * 6 * 3) * 6 + 6) + 9 + 5
  ,((5 + 7 * 3 * 4 + 2 * 7) + 5 + 7 + 4 * 6) + 9 + 4 * ((2 + 6) * (4 * 5 * 3 * 8) + (3 * 5) * 3) * 6
  ,(2 + 2 * (7 * 8 + 3 + 2 + 3) * (5 + 7) * (6 * 2 + 6 + 9 * 4) + (9 + 3 + 5)) * 3 + 2 * 6 + 5 + 9
  ,9 * (4 * 6 * 8 + 6 + 3 * 9) * 7 * 6 + (8 + 3 * 4 * 4)
  ,7 * 2 + 5 + 3
  ,3 + (5 + 7 + 9 * (4 * 5 * 8 + 6) * (8 * 4 * 5 + 4) * 6) * 6 + 9
  ,(9 * 3 * 9 * 4 * 8 * (2 * 9 * 3)) * (4 * 8 * 7 * 8) * 9 * 3 * 3 * 3
  ,(3 + 6 + 4) + ((2 * 2 + 3) * 6 + 8 * 9 * 2 + (3 + 5 * 4 + 7 + 6)) * 9 + 6 + 6 * (4 * 2 + 9 + 4 * 5)
  ,2 * 6 * 3 * ((2 + 8 * 8) * 6 * 4 + 5) + (2 + 6) * 8
  ,5 + 7 * 9 + ((6 + 3 * 7 + 9 + 2 + 2) + 9) + 3
  ,4 * (6 * 7 * 4) * 6
  ,5 * (8 * 3 * 8 * 7 + (2 + 6 * 7 + 2 * 2)) * (3 * 3 + (2 * 5) * (8 + 6 * 2 + 6 + 6 * 7)) + 6
  ,((5 + 3 * 7 + 4 + 2 * 4) + (7 + 8 * 6)) * (9 + 6 + (9 * 6 * 4 * 6 * 6 + 3)) + 6 * 8 * 9 + 3
  ,(4 * 3 + 4) * 3 * (8 * 5) + 9 * 3 * 8
  ,2 + (9 + 5 + (5 * 4 * 5) * 7 * (5 * 7 + 2 + 3 * 8)) * 6 + 5 + 7 * 7
  ,8 * 8 * (4 * 8 * 5 + 7) + ((6 + 3 + 2 + 5 + 2 + 2) + 5 * 2)
  ,(9 * (5 * 5 * 5 + 6 * 7)) * 9 + 9
  ,3 + 4 * 8 + (5 * 8 * 8 * (2 * 6 * 5 * 4 * 9) * (4 + 5 + 2 + 6 * 4 * 3) + 7) + 5
  ,8 + ((3 * 6 * 4 + 9) * 9 + 3)
  ,5 * 8 + 6 + (3 + 8 * 8 + 8 * 7) + 8
  ,6 * 5 + 2 + 3 * 9
  ,8 * (6 * 6 * (7 + 7 * 6))
  ,8 + 7 + 8 * 6 + (6 + (7 * 3 * 4) + 4 * 3 * (3 * 9 * 3 + 9) + 6) * (2 * 7 * 3 + 4)
  ,6 + 9 * 9 + (4 + 4) + (6 + 9)
  ,3 * 8 * 8 + ((9 + 9) * 2) * 7 + 5
  ,4 * 6 * 3 * (5 + 9 * 4 * 2 * 5 * 2) + 2
  ,5 + (8 + 7 + (6 + 8 * 6 + 8 + 4) + (7 * 3 + 4 * 6) + 6 + 4)
  ,3 + 8 * 8 + ((9 * 3 * 3) * 6) * 6
  ,2 + 9 * (5 * 5 * (8 * 2 + 5 + 5 + 3)) * 8 + 8 + 3
  ,7 * 6 + 8 + 2 + (2 + 8 * 7 * 6)
  ,(9 + 5 + 9 + (5 * 5 + 7 * 9)) + 3
  ,3 * 7 * (3 * 6 * (7 * 4 + 5 * 5 * 8 * 9) + 7 * 4 * 4) * (4 * 6 + 7) + ((3 * 8 * 5) * 2)
  ,3 * 2 * 5 * ((7 * 6) * 5 * 9 + 4 + 9)
  ,7 * (8 + 7 * 6 * 3 * 3)
  ,8 * 9 * 6 + (9 + (5 + 6 * 3 * 3 + 5 * 2) + 4 + 7) + 6 + 5
  ,2 + 3 * 7 * 3 + ((9 * 8 + 7 * 3 * 9) + (5 + 8 + 5 * 2 + 6)) + (3 + 7 + 4)
  ,3 * 6 * (3 + 5 + 2 * (9 + 6 + 4 * 4 * 7 * 6) * (3 * 9 + 5 * 6)) * 5 * 4
  ,(9 + 7) + 7 * 7 * (6 * 5 * 5)
  ,(9 * 8) * 9 * 7 * (5 * 3 * 8 * 4) + 7 * 9
  ,5 * 6 + 9
  ,9 + 6 * (8 + (7 + 9 * 3 * 8 * 6 * 8) * 7 + (5 + 6 + 4 * 9)) + 5
  ,3 + (7 + 7 + 8 + 4 + 6) + 4 + 7 * 9
  ,5 * ((8 + 5 * 7) + (4 + 9 * 9)) * 7 + 3 * 9 * 6
  ,9 * (2 + (7 * 6 + 2 + 8 + 2)) * 2
  ,3 + (8 + (4 + 4) + 3 + (2 + 2 + 9 + 7 * 6 * 9) * 2 * 6) * 5
  ,(9 * 8) * 3 * 4 + 9 + 4 * 6
  ,7 + 6 * (4 + (8 + 8 + 6 + 3) + 8 * 8 * (4 + 6 + 5 * 8)) + 6
  ,5 * 4 + 8 * ((6 + 9 * 6) * 5 * (5 + 2 + 7 * 9) * 9 * 4 * 5) * (3 + 2) + 3
  ,9 + 4 * (8 + 7 * 3 * 7 * (4 + 6 * 8) + 6) * 9
  ,((6 * 3 + 3) * 8) + 8 + 9 * 7 + 6 + 5
  ,7 * (3 + (3 + 2 * 9 + 5) * 6) + 5
  ,3 + (2 * 2 + 7 * (2 * 9 * 9 + 2 * 9 * 6)) * 9 * 5 + 8 * 5
  ,3 + (9 + (8 + 4 * 5 * 4) + 7 * 8 + 7) * 9 + 2
  ,(2 + 8 * 5 * 8 * (3 * 5 * 3 + 6 * 3) + 3) * 6
  ,3 * 9 * 5 * 7 + 5 * (8 + 4 + 5 * 7 * 8)
  ,(3 + 8 + 3 + 7 + (9 + 8 * 7 + 2 * 5) * (2 * 4 * 7 * 4 * 6)) * 8
  ,(5 * (3 + 3 + 8 + 2) * 9) + 4 + 5 * 6
  ,(8 + 7 * 7) * (7 * (5 * 9 + 2 + 3 * 6)) + 8 + 5 * 8 * 7
  ,4 + (8 * (9 + 4 + 4 + 3 + 8 * 9)) + 5 * 5 * 5
  ,(5 + (5 * 5 * 7) + 7 * (2 + 4 * 2 + 5)) + 8 + 5 + 2 * 4 * (3 * (4 * 7 * 6 * 6 * 8 + 2) * 7)
  ,(9 * 4 + 6 * 8 * 2 * 8) * 2 + 9
  ,(6 * (7 * 3 + 2 * 5) * 9 * 4 + 4 * (9 + 4 + 4)) + 4 * 8
  ,7 * 5 * (9 + (4 * 4 * 4 * 6) + 4 * 6) * (6 * 8 * 2) + 9 * 6
  ,2 * (2 * 3) * 9 + 2 * 9
  ,((3 * 2 + 7) + (5 * 9 + 2 * 3 * 4 * 9) * 3 + (8 * 4 * 5 + 6 + 9)) * 6 * 3 + 6
  ,(3 + 8 + 9 * 2 + 5) + 2 * 2 + 7
  ,9 * (9 * 3 + 7) + 7 * 5 + 5
  ,8 * 5 * (9 + (2 + 8 + 3 * 4 * 3 * 8) * 3 * (5 + 6) + 8) * (6 + 3 * 7 * 2 * 4 * (6 + 6 * 3 * 9))
  ,8 + 2 * 8 * (5 + (5 + 7 * 4 + 6 * 9) * 7 * 2 + 4) * 5
  ,(9 * (8 * 7) + 3 * (9 + 5 * 7 + 4 + 9) + 8) * (8 + 8) * 4
  ,(7 + 9 * 4 + (2 * 4) + 7 * 8) * 4 + ((4 + 8 * 7 + 4 * 4) + 2)
  ,(5 + 4) * (2 + 2)
  ,5 + 4
  ,7 * 8 * (7 * 7 + 4 * 4 * (6 * 6 * 3)) * 7 * (6 * 5 + 7 * 5)
  ,5 * (6 * 8 + 5 * 6 * 6 + 2) + 6 * 7
  ,4 + 3 + (7 * (6 * 2 + 3) * 8) * 3
  ,2 + 2 + (3 * 7 * 3 + 3 + 6) * 3 + 5
  ,5 * ((3 * 4 + 4 + 8 * 2 + 7) + (9 * 7) + 4)
  ,8 * 2 * (5 + 7) + (8 * 7 * 6 * 2 * 4) * 7 * 5
  ,((6 + 9 * 4 * 3 * 2) * (5 * 4 * 4 + 6 + 6) * 7 * 7) * 7 * 6 + 2
  ,4 + (5 * (9 * 5 * 6) + 6 + 4 * 9 * 9) + 6 * 4 * 3
  ,5 + (7 * (5 + 3 * 6 + 7 + 5 + 6) * 8 + 3) + 3 + 7 * 5
  ,4 + ((8 * 6 * 9 + 6) * 4)
  ,(2 * (6 * 3 + 5) + 2 * (5 * 9 + 4 + 5 * 6) + 4) + 7 + (9 + 4 + 5 * 2)
  ,(8 * (8 * 5 * 6 + 4 * 9 + 5)) * 3 + 5 + 7 * ((3 + 7 + 2 + 3 + 7 * 5) * 9 + 7 + 6)
  ,8 + 2 + (9 + 6 * 9 * 5) + 8
  ,(3 + 7 * 3 * 9 + 6 * 3) * (4 * 2 * 5 * 2 + 5) + 6 + 5
  ,5 * (9 + 8 + 4) * 6 * 4 * 5 + 7
  ,5 + 8 + 7 * (3 + (3 * 8 * 9 * 9) + 6 * (2 + 3) * (9 + 3)) + 8 + 7
  ,((8 * 6 * 5 + 6) + (7 + 9) * 3 * 7 + 4 * 5) * 9 * 8 * 3
  ,5 * 3 + (7 * 3 * (4 * 3) * (5 * 3 + 5 + 3) * 9 + 3) * 4
  ,((7 * 5 + 9 + 4 * 7) * 5 + 7 * (3 * 2 + 5 * 3)) * (4 * 6)
  ,(8 + 3 + (8 + 8) * 6 + 5) + 9 + 6 * 3 * 9
  ,3 * (2 + 6 + 9 * 6 * (3 + 8)) * 4 + 3 + 9 + 6
  ,4 + 6 + ((2 * 7 * 5 * 4 * 9) + 3 + 5) + (8 * (6 + 4) + 5 + 8 + 3 + 5) * 2
  ,8 + 2 + (2 + 8) + 6 * 2 * 8
  ,3 * (6 + 9 + 2 * 8 + (4 + 8 * 8 + 4)) * 5
  ,7 * ((3 + 8 * 7) + 3 + 2 + 2) * 7 * 5 * 4
  ,(8 + 6 + 3 + 7 * 2) * (6 * 5)
  ,9 * (7 * 6) * 3 * 3 * ((6 + 7 * 6 * 6 * 2 + 9) * (8 + 5 + 3) * 8 + 8 + 3 * 5) * 8
  ,2 * (9 + 5 + 3) + 3 + (2 * 3 * 2 * 5) + 5 * 9
  ,3 + (9 + (9 * 8 * 8)) * 3
  ,5 + 3 * 4 + ((4 + 2 + 2 * 9 + 6 + 2) * 6 * 5 + (6 + 3 + 4 + 4 * 2)) * (5 * 7 + 8) * 4
  ,7 * ((8 * 3 + 3 + 9 + 9 * 8) + 3 * 5 + (2 * 3) * 6) + ((3 + 5 + 8 * 8 * 9) + 4 * 7 + 3 * 9 + 6) * 3 * 3 + (2 + 3 + (9 * 7 + 6) * 5 * 9 * 4)
  ,(9 + 2 + 7) + (8 + 8 * 3 * 2 * (5 + 4 * 8 + 2 + 4 * 6) + (8 + 5)) * 9 * ((3 + 8 * 4) + 7 * 7 * (5 * 3 * 3 * 7))
  ,((6 + 8) * 8 + 5 * (7 * 4 * 8 + 9 * 5) + 2 + 7) * 5 + 9 + (4 + 7 + (4 + 9 * 4 + 6 + 6) * (6 * 2 * 2 * 9 * 8)) + 5
  ,4 + (3 + 6 + 9 * 8) * 3 * 5 * 6
  ,(4 * 3 * (3 * 7 + 6 + 5 + 9) + 8) + 8 * 2 + 5
  ,7 * 7 * 8 + ((8 + 3 + 2) + (2 + 4 * 4 * 3 * 5 * 2) + 8) * (6 * 5 + 7 + (4 + 7 + 2) + 4) * 3
  ,5 * 8 * 4 * 8 * ((8 + 5 + 6 + 9 + 9 + 7) + 5 * 2)
  ,5 * 7 + (8 + 8 * 5 + 4 + 6 * 8) * ((4 * 9 * 7 + 5) * 7 + 4 * (3 * 4 * 5 + 9) * (6 + 8 + 5 * 5 * 2 + 6))
  ,9 * 9
  ,4 * 9 + (6 * 2 + 3) * 5 * 9 + 7
  ,6 * 7 + 8 + 5 + (5 + 2)
  ,2 + (3 + 3) + 3
  ,(8 * 6 * (4 + 7 * 7 * 7 * 3 + 6)) + (3 * 2 + 7) * 5 * ((4 * 8 + 2) * 4 * (2 * 9 * 4 + 2) + 7 * 6 + (7 + 2 * 8 + 2)) + (2 + (9 + 7 * 9 + 4 + 5)) + 3
  ,(8 + 8 * 2) + 9 + 5 * 5 + 6
  ,(5 * 6 * 4 + 7) * 9 * 8 * (5 * 7 * 4 + (7 + 9)) + 4 * (2 * 6 + 4 * 6)
  ,4 + (8 * 5 * 6 + 9 + 9 * 5) * 9 + 2 * 4 + (5 * 4 + 8 + 9 * 2)
  ,4 * 5 * 6 * (9 * 3 * 4 + (2 + 2) + 7 + 7) * 4
  ,(2 * (6 * 6 * 9 * 3 + 3)) + (4 * 4) * 5
  ,(5 + (3 * 8 * 5 + 2) + 9 + 9) + (3 + 7 + 4 * (2 + 6 + 5 * 9 * 6) + 8) * 9
  ,5 + (5 + 4 + 5 + 9 + (9 + 7 * 5)) + (7 + 5 * 8 * 3) + (5 + (4 * 3 + 7 + 9 * 7 * 3) * 6 * 4 * 6) + (3 + (6 + 6) + (7 * 2) * (3 * 8 + 2))
  ,((4 + 4 + 3 + 5 * 4 * 4) * (8 + 2) + (5 + 3 + 4 * 9) + (8 * 9 * 3 * 9 + 9 * 2) + 3 + 4) * 4 * 7 * 7
  ,5 * 8 + 6 + (7 * 7)
  ,((7 + 2 + 6) + 3) + 3 * ((9 + 7 + 2 + 5 + 7 * 8) + 5 * 8 + (3 + 9)) * (5 * (4 + 2 * 4) * 4 * 5)
  ,8 + (8 * 8 + (8 * 3 + 6 + 3 + 9) + 5) * 3 + 3 * 5
  ,(5 + 2) * (9 * 9 * (6 * 6)) + 3 * 3 + 4 * 5
  ,6 * 7 + 6 * 7
  ,(4 * (7 + 2 + 5 * 7 + 2 * 7)) * 4 * (4 + 7)
  ,3 * 7 * (7 + 9 + 6 + 9) + 6 + 6 * 2
  ,3 + 4 + 9 * (7 + (4 * 4 + 2 * 8) * 9 * (4 * 8 * 2 + 7 * 3) + 8) * 3
  ,6 * 6 + (4 + 3) * (2 * 2 * 9 + 9 * 4 * 4) + (4 + 7 * 2)
  ,4 * (6 + 7 * (7 + 2) + (2 * 5 * 2) * 5 + 3) + 4 + 4 + 7
  ,((7 + 6 * 7 * 3 * 6) * 4 + (2 * 4 * 8 * 2 + 7 + 3)) + 4
  ,5 + ((2 * 9 * 7) * 6 * 6 + 8 * (8 * 8) * 3)
  ,((5 * 6) * (2 * 2)) + (6 * 4) + 7
  ,(7 * 4 * 2 * 6) + 7 * (8 * 7 + 7 * (2 * 3 * 2 + 2) * 4) * 4
  ,3 + 7 + 5 + 9 * ((8 * 7) + 7 * 9) + 8
  ,((8 + 9 + 6 + 4 + 3 + 9) + (9 + 2 + 5 + 6 * 7) * 3 * 9 * 4) + 4 * 4 * 7
  ,(7 * 6 * 2) * (5 + 2 + (9 * 3 + 3 * 5 + 7) + 6) + 4 + (9 * 9 * 7 + 2) * 2 * 5
  ,(3 * 9) * 8 * 4 * 4 * 5
  ,2 * 2 + 2 * 8 * (8 + (8 + 2 + 8) + 4 + (8 + 8 * 5 * 4 * 2))
  ,4 + ((3 + 9 * 6 + 9 * 6 * 5) + 9 * 9 * 8 * 8) + 5 + 8
  ,(7 * 8 * 7 * 6 * 6 + 4) * (2 * (5 + 4 * 4 + 8 + 8 * 7))
  ,5 * (7 + 8 * 5 * 4) + ((6 + 7 + 5 + 4) * 5 * 3 + 3) * 6 * 3
  ,2 * (7 + 4 + 2 * 9 * 3 + 4) * 6 * 9 * 3
  ,(3 + (4 * 2 * 4 * 2 * 4 * 5) * (5 + 8)) * 3 + 9 * 4 * 3 * (3 * (6 * 9 * 6 + 8) * (9 * 4 + 8 + 3) + 3 + (6 + 3 + 8 + 4) + (3 + 4 * 2 * 4))
  ,5 + (9 + 5) + 6 * (3 * 5 * 5 * (4 + 8) * 3) + 5 + 9
  ,6 + 2 * 5 + 3 * (2 + 5 * 7 * 6 * (8 * 8 * 2 * 7 * 8) + 7)
  ,7 * 3 * 7 * 5
  ,7 + ((9 * 9) * (8 + 4 + 5 * 5) * 9) + 2 * 7 + (5 + 4 + 6 * 5 + 4 + 6)
  ,((6 + 7 + 8 + 9 + 5) + 4 + (9 + 9 + 2) * 9 + 7) + 7 + 8 * 3
  ,2 + (2 * 6 * (7 * 4) + 6) + 6 + 6 * 8
  ,(4 * 4 * 8) + 3 * 3
  ,((4 + 5 * 4 + 2 + 6 + 5) + 6) * 9 + 9 + 2
  ,6 + 3 + ((3 * 5 * 3 + 6 + 9 + 5) + (9 + 9 + 8) * (8 * 2 + 5 + 5) + 5 + 9 + (7 + 3 + 5 * 7 * 7 * 4)) + 2
  ,9 * (9 + (4 + 8) * 4 * 4 + 9) + 8
  ,(9 * 8 * (3 + 9 * 4 + 7 * 4) * (3 + 5 * 4 + 6 + 3)) * 9 * (3 + 3) + 5
  ,6 * ((8 + 5 * 2 * 9 * 5 + 7) * 9 * 4) + 9
  ,5 + (7 + (5 * 2 + 3 + 8 * 3) + 2 + 6)
  ,3 + 9 * 5 + ((8 * 4 * 2) * 5 * 6 + 5 + (4 * 5 + 7 * 9 + 8 + 3)) + 4 + (5 * 7)
  ,6 * 2 * 3 * 7 * 3
  ,(2 * (4 * 3 * 4 + 8) + (7 * 6 * 9 * 3) + 2 * 4 + 2) + 5 * 9 * (4 + (9 + 5)) + 9 * 2
  ,(6 * 8 + 9 + 7 + 3 * 7) + 8 * 3 * 4 + (4 * 8 * 4 + 6 * 3) * 7
  ,5 + (6 + (9 + 2 * 2 * 9 + 5) * 7 * 2 + 9)
  ,7 + 9 * ((6 + 2 * 7 + 4) + 6 + 5 * (5 * 3)) * ((9 + 8) + 6 + 8 * 4) * (3 + 4 * 3 + 8)
  ,((2 + 5 + 4 + 7 * 4 * 6) * 5 + 9) + 8 + (6 + 9 + 8) + 3
  ,3 * 2 + 5 + ((4 + 7 + 4 * 6 * 9) + 8) * 9 + 7
  ,3 * (6 * (4 + 9) + 7 * 5)
  ,(6 + 6 * 9 * 7) * 3 * 8
  ,4 + 8 * ((5 * 9) * 6) * 6
  ,3 * 6 * 4 + (3 + (4 * 2) + 6 + 4 + 9)
  ,4 + 7 + (3 * (6 * 3) * 7)
  ,(7 + 5 + (5 + 9 * 7) * 7 * 6 * 2) * 7 + (4 * (6 * 9 + 4 * 4) + 5 + (4 + 6 * 8 * 5 + 3) * 3)
  ,8 + 9 * (8 + 3 + 3 + 6 + (3 + 2 + 6 * 5 * 8 + 7)) * 2
  ,4 + 7 * (6 * 3 + (8 * 9) + (9 + 4 + 3)) + (4 * 5) * 6 * 6
  ,((6 * 5) + (2 + 6 * 7 + 6 * 6 + 3) * 4) * 6 + 7 + 5
  ,6 + 9 * 6 + 3 * 5 * 3
  ,(3 * 3) + 8 + 5
  ,(3 * 9 + 4 * 4 * 9) + (4 + 4 + 8 * 7) * 3 + 2 * 7 + (7 + 5 + 7 + 6)
  ,9 + ((6 * 6 + 4 + 2 * 3) + 3 * 7 * (9 + 7 + 9 * 6 + 3) + 9 + 2) * 8 + 9
  ,6 + 4 * 9 + 6
  ,6 * 8 + 7 * 9 * (6 + 2 * 6 * 8 * 2 + 2) + 3
  ,3 * ((3 * 7) + 8 * (2 + 8 + 8 * 8 * 5 + 7)) + ((9 * 8 * 5 + 6 + 3 + 3) * (2 * 3 * 8) + 3 * 3 * 5 + 7) + 3 + 6 + 6
  ,(2 * (9 * 2 + 4 + 9 + 5 + 5)) + 6
  ,2 * (7 + 3) + 7 + ((9 * 6 + 3 * 3) * 7 * (5 * 2)) + 3
  ,3 * ((4 * 2 + 5 + 5 + 9) + 9 + (4 * 8 + 8 + 7 + 3 + 4) * 3 * 6) * 7
  ,(8 * 3) * 6 + 6 + 9 + ((6 * 9) + 3 + (7 + 7 + 8 * 6 + 6 + 4) * 4)
  ,6 + 6 + (6 + (7 * 7 * 7 * 6) * (2 * 7 + 4 + 6 + 5 + 6) * 9 * 5 + (7 * 8 * 3 * 9 + 5))
  ,7 * (5 * 2 * 3 + 5) * 4
  ,6 + (4 + 8 + 3 + 4) + (4 * 3 * 4 + (6 * 3) + 5 * 7)
  ,(3 * 5) + 8 + ((2 * 6 + 8 * 5 + 5 * 4) + (6 + 9 + 8) + 9) * (6 * (3 + 9) * 8)
  ,4 + 8 + 3 * (9 + (9 + 8 + 4 * 8) + 8)
  ,(9 * (8 + 4 * 4 * 8) * 9 + (7 + 2 * 8 * 7 * 9 * 8) + 4) + 2 + 6 * 2 + 8 + 5
  ,7 * ((9 * 9 + 7 + 4) + 2 * (7 + 4 * 6) * 7 + 4) * 7 * 3 + 7 * 9
  ,(9 + 5) * (7 + 5 + 9 * 9) + 3 + 7
  ,2 + ((5 * 5 + 4 * 6 + 8) + (9 + 5 + 7 * 6 * 7 + 5) * 2 * 2 + 6) * 7 + 7
  ,(6 + 5 + 8 * 3) + ((7 + 4 + 6 + 6 + 8) + (7 + 3 + 5)) * 2
  ,8 * 7 + 8 * 9 + (7 + (9 * 9 * 2 * 9 * 4 * 7) * 2 + 8)
  ,9 + ((7 + 5 + 2 * 3) * (8 * 4 + 9 + 6) * 6 + (3 + 2 + 4 + 5) * 4) * 4 + (9 * 7 + 9 * 2 * 2)
  ,2 * ((4 + 3 * 7) * 8 + 6 + 2 * 9 + 3) + 6 + 6 + 2 * 7
  ,5 + 5 + ((5 * 8 * 9 + 9 * 3) * 9)
  ,6 + ((7 + 6 * 9 + 7) + 4) * 7 + 3
  ,7 + 8 * 7 * 3 * ((8 * 9 + 5) + (2 + 6 + 6) * (3 * 4 * 9) * 8 + 6 + 9) + 3
  ,2 + 2 + ((8 * 8 * 3) * (5 * 7 * 7 * 5 * 4)) * 7
  ,(4 * 4 + 3) + 6
  ,5 * 7 + (7 + 4) * ((7 + 3) + 5 * 2 * 4 + (2 + 5))
  ,(5 + 3 + 2) * 6 + 2 + 6
  ,5 * (8 * (7 + 9 + 7 * 3 * 4 * 9) + (5 + 3 + 6 + 4 + 2 * 2) + 7 * 9 + 2) * (3 * 6 * 7 + 6 * 4)
  ,4 + ((6 + 2 * 6 * 2 * 7) * (6 * 3 + 2 + 5) * 7)
  ,6 + 9 + (8 + 4)
  ,2 + 2 + 5 + 9 * 4 * 7
  ,((8 + 4 * 6 + 8) + 3 * 9 + 2) + 4 + 3
  ,7 + 2 + 6 + ((7 + 3 * 3 + 6 + 3) * 9 + 3 * 7 * 5) * 9
  ,6 + (8 * 2 + 4)
  ,5 + (7 + 9 * 6) + 4 + (2 * 9 * 3 * (6 + 4)) * 9 + 8
  ,7 + 8 + (7 * (6 + 3 * 7 * 3 + 8 + 3)) * 3 * ((6 + 8 + 6 + 6 * 5) * (4 + 8 + 5 * 8) * 9 + 9 * 6) * (2 * 3 + 2 * 8 * (7 + 6) + 5)
  ,(5 + 9 * (9 * 7 + 6) + (5 + 5 * 6 + 7 * 3 + 7) * (5 * 7 * 6 * 9 + 4 + 7)) * 2 * 5 + (8 * 2 + 4 + (5 * 9 + 4 + 3 * 2)) + 8 + 4
  ,3 * 3 + 7 * 3 * (9 + (3 * 2 * 7 + 3 + 8) * 5 + 8 * 2 + 2) * 2
  ,3 + 8 + 8 + 2 + 2 * (3 + (3 + 8 + 3))
  ,(3 + 5 * 6 + 3 * 4 * 6) * ((5 + 4 * 9 + 3 + 7) * 3 * 4 + 4) + 6 * (9 + 8 + 6 * (7 * 4 * 5 * 2) + (7 + 7 * 5) * (3 * 6)) + (6 * 9 * 4 * 9 + 7)
  ,5 + 9 + ((8 + 8) + 9 * 6 + 7 * (4 + 9)) + 4
  ,7 * (6 * 5 + 4 * 8) * 2 * 5
  ,7 + 4 * ((7 * 4 * 2 + 9 * 4) + 8 * 2 + 4 + 8 * 5) * (2 + (3 * 2 * 3) * (7 + 3 * 9 + 5 * 2) * (5 * 5 * 6 * 6))
  ,6 + ((7 * 3 * 3 + 7 + 7 * 3) * 2 + 5 * 3) + 2 + 3 + 8
  ,(7 * (6 + 7) + 6 * 2 * (7 * 7 * 3 * 4)) * 4 * 5
  ,6 + 5 * (7 + 8 * 8)
  ,5 * 2 + ((8 + 4 * 8 + 6 + 9 * 3) * 9 * (3 + 7 * 5 + 3 * 8 + 6) * 2 * 8 + 4) + 3 * 8 + 7
  ,8 + 9 * (2 * 5) + 8 + (4 * 7) * (8 + 5 * 7 * (9 * 2 + 7 + 4 + 6 * 7) + 3)
  ,5 * 9 * (2 * 8 * 5 + 5 * 7 * 7) + 9 + 6
  ,2 * 5
  ,5 + (3 * 2 * (4 * 4 * 8 + 6 + 2)) * (3 * (9 + 7 + 3 * 7 + 3) + 8 + (5 + 9 * 4 + 4) * 8 * 4) + 9 + 6 + 2
  ,9 * 3 * 3 * (4 * (5 * 8 + 5) + 7 + 3 * (6 * 8 * 9 * 2 * 4 + 4)) * 7
  ,(4 + 9) * 8 * 2 * 5
  ,9 * 8 + (5 + 3 + 9 + 9 + 4)
  ,4 + (8 * (7 + 6 + 3) * 4 + (2 + 6 * 5 * 2 * 2)) * (6 + (4 * 5) * 5) + 5 + 4
  ,6 + 5 + (6 + (9 + 6 * 2) * 7 * 8 * 6 * 7)
  ,2 * 7 * 8
  ,9 + 2
  ,8 * (7 + 3 + 5 * (3 * 6) * (9 + 6 * 2))
  ,(3 + 9 * 5 * 7 * 7 * 3) + (3 * 8 * (2 + 8 * 4 + 4 + 7) * (2 + 8 * 6) + 5) * (4 * 3 * 5) * (8 * 8 * 3 + 7)
  ,(9 + 6) * 6 * 7 * 5 + (6 * (5 * 2 + 7 * 6) + 5 * 2 * 8) + 6
  ,3 * 6 + (9 + (7 * 3 + 8 + 3)) + 8 * (8 * 9 + 7)
  ,(5 + (9 * 7 * 6) * (4 + 4 + 8 + 4 * 4 * 2)) * 5
  ,9 + (8 * (7 * 6 + 2 * 4) + 7) * 4 + 8 + 8 * (9 * (6 + 4 + 7 * 9 + 9 * 7) + (7 + 4 * 7 + 6 * 4) * 7 * 9)
  ,6 * 2 + (4 + 2 * 7 + 6 * 2 * (3 + 8 + 6 + 8)) * 7
  ,7 + 7
  ,8 * 6 * 9 * 6 + 7 + 4
  ,6 + 3 * (7 + 3 * 5 * (8 * 2 + 5))
  ,3 * (3 * 9 * 8 + 5 * 5 + (6 + 8))
  ,(5 * (3 * 4 * 9 * 6 + 6)) * 4 + 3 * 8
  ,(3 + 6 + (2 * 8 * 8 + 4) * 7 * 5 + 3) * 9 * 5 * 5 * 8
  ,(5 + 9 * (6 * 2 * 2 + 7 + 2 + 8)) * 5 + 6 + 7
  ,7 * 4 + (6 + 8 + (4 * 8 + 9 + 9 + 5 + 2) + 8 + 6 + (4 * 3 + 4 * 2 + 4 + 5)) + 2 + 6
  ,4 * (5 + (8 + 4 * 5) * 8) + 2 * 7 * 7
  ,2 * 7 + ((3 * 4 + 9 * 4 + 3) * (6 * 5 + 2 + 2 + 6 * 3) * (3 * 8 * 4 + 8 + 6 + 9) * 4 * 4 * 6) + 8 + (2 * (2 * 9 + 2 * 3) * 7 + 5) + 3
  ,(8 * 7) * 8 * (6 + 6 + 8 * 2 + 3) * 9 * 9 + (9 + 9 + 2 + 5)
  ,3 * ((4 + 9 * 8 + 4) + 8 + 3 * 4) * 9 + 4 * 9 + 4
  ,7 * 6 + 6 * 6 * 9
  ,3 + 8 * (6 * (6 + 2 + 9) * 6 + 2 + 6) + 4
  ,((4 + 8 * 3 * 3) + (4 + 5) * (2 * 8 * 9 + 6) * (7 * 6 + 5 * 4 + 2)) + 5 * (7 * 5) * 6
  ,7 + 7 * 2 * (7 * 7 * 2) * 7 + 7
  ,9 * (8 * 8 * 5 + 3) + 2 + (8 + (6 * 2) + (5 + 3 + 9 * 8 + 4)) * (4 + (7 * 7 + 3 * 7 + 4 * 4) + 9)
  ,2 + 8 * 9 + 8 + (6 * 8 + (8 + 9 * 7 * 3 * 3 * 9) + 6 * 9 + 2)
  ,6 + (4 + 5 * 5 + (6 + 6 * 5 + 9 * 6 * 3) * 3) * 5 + 8 + 9 * 2
  ,2 * 7 * (5 * 2 + 6 * 3 + 4 * 9) + 6
  ,(3 + 7 * 3 * 6) + 3 + 6 + (5 * 6 * 7 * (9 * 4 + 7 + 9 * 9) * (6 + 9 * 2 * 5) * (4 + 7 + 2 + 4 + 6 + 8)) + 3
  ,6 * 5 + ((9 * 2 * 8 + 9 + 8 * 2) * 9 * 3 + 4 + 8 * 3) * 7
  ,9 * 4 * (9 + 4 + 7 * 2 * 2) * 6 * 5 * 5
  ,5 + (8 + 8 + 2 * (7 * 6 * 4) * 7 * 9) * 4 + (9 * 9) * 9 + 4
  ,5 + 8 * 9 * (7 + 8 + 2 + 5) + 5
  ,5 * 8 * ((7 * 2 + 4) * 2 + 3 + 9)
  ,8 + (3 + 8 * (3 * 2 + 9 + 3 * 6 + 2) + 5 * 5) * 2
  ,(8 + 3 * 8) + (8 * 8 + 5 + 7 * 7 + 3) + 4 * 3 * 9 + 9
  ,5 * (5 + 6 * 6) + (3 * 7 * 6 + 9 * 4 + 9) + 9
  ,2 + 5 + 6 * (9 * 2) + 2 + 4
  ,5 + 3 + (7 + 9 * 3 + (4 * 5)) * 9
  ,(8 + 5 + 9 + 7) * 6
  ]
